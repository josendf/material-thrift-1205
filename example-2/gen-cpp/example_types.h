/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef example_TYPES_H
#define example_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace Example {

typedef struct _MyValue__isset {
  _MyValue__isset() : exists(false), content(false) {}
  bool exists;
  bool content;
} _MyValue__isset;

class MyValue {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  MyValue() : exists(0), content("") {
  }

  virtual ~MyValue() throw() {}

  bool exists;
  std::string content;

  _MyValue__isset __isset;

  void __set_exists(const bool val) {
    exists = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  bool operator == (const MyValue & rhs) const
  {
    if (!(exists == rhs.exists))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const MyValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
